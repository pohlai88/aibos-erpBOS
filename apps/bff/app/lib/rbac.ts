import { Capability as ContractCapability } from '@aibos/contracts';

export type Capability = ContractCapability | string;

// Role-based capability mappings
const ROLE_CAPS: Record<'admin' | 'accountant' | 'ops', Capability[]> = {
  admin: [
    'reports:read',
    'journals:post',
    'reversal:create',
    'inventory:move',
    'payments:post',
    'periods:manage',
    'keys:manage',
    'audit:read',
    'audit:admin',
    'audit:respond',
    'audit:view',
    'itgc:view',
    'itgc:admin',
    'itgc:breakglass',
    'itgc:campaigns',
    'itgc:ingest',
    'close:board:view',
    'close:board:manage',
    'close:board:export',
    'close:run',
    'close:report',
    'close:manage',
    'budgets:manage',
    'budgets:read',
    'budgets:approve',
    'forecasts:manage',
    'forecasts:approve',
    'cash:manage',
    'capex:manage',
    'fx:manage',
    'fx:read',
    'alloc:manage',
    'alloc:read',
    'tax:manage',
    'tax:read',
    'consol:manage',
    'consol:read',
    'pay:bank_profile',
    'pay:dispatch',
    'pay:discount:policy',
    'pay:discount:run',
    'pay:discount:offer',
    'ar:dunning:policy',
    'ar:dunning:run',
    'ar:remit:import',
    'ar:cashapp:run',
    'ar:ptp',
    'ar:dispute',
    'ar:credit:policy',
    'ar:credit:run',
    'ar:credit:approve',
    'ar:credit:dispute',
    'ar:credit:writeoff',
    'ar:credit:reserve',
    'ar:credit:customer',
    'ar:collect:workbench',
    'ar:portal:policy',
    'ar:portal:ops',
    'ar:stmt:policy',
    'ar:stmt:run',
    'ar:stmt:email',
    'rb:catalog',
    'rb:contract',
    'rb:usage:ingest',
    'rb:invoice:run',
    'rb:credit',
    'rev:policy',
    'rev:allocate',
    'rev:schedule',
    'rev:recognize',
    'rev:export',
    'rev:ssp:catalog',
    'rev:ssp:bundle',
    'rev:ssp:discount',
    'close:board:view',
    'close:board:manage',
    'close:board:export',
    'close:run',
    'close:report',
    'close:manage',
    'controls:auto',
    'controls:cert',
    'insights:benchmark',
    'insights:close',
    'evidence:vault',
    'evidence:ebinder',
    'sox:302',
    'sox:404',
    'sox:test.plan',
    'sox:test.exec',
    'attest:portal',
    'audit:workspace',
    'itgc:uar',
    'ops:playbook:approve',
    'ops:playbook:execute',
    'ops:run:read',
    'lease:read',
    'lease:manage',
    'lease:post',
    'lease:disclose',
    'lease:sublease',
    'lease:slb',
    'lease:lessor_post',
    'lease:exit:prepare',
    'lease:exit:post',
    'lease:restoration',
    'lease:impair:test',
    'lease:impair:post',
    'lease:onerous',
  ],
  accountant: [
    'reports:read',
    'journals:post',
    'reversal:create',
    'inventory:move',
    'payments:post',
    'periods:manage',
    'audit:read',
    'audit:respond',
    'audit:view',
    'itgc:view',
    'itgc:breakglass',
    'itgc:campaigns',
    'close:board:view',
    'close:run',
    'close:report',
    'budgets:manage',
    'budgets:read',
    'budgets:approve',
    'forecasts:manage',
    'forecasts:approve',
    'cash:manage',
    'capex:manage',
    'fx:manage',
    'fx:read',
    'alloc:manage',
    'alloc:read',
    'tax:manage',
    'tax:read',
    'consol:manage',
    'consol:read',
    'pay:bank_profile',
    'pay:dispatch',
    'pay:discount:policy',
    'pay:discount:run',
    'pay:discount:offer',
    'ar:dunning:policy',
    'ar:dunning:run',
    'ar:remit:import',
    'ar:cashapp:run',
    'ar:ptp',
    'ar:dispute',
    'ar:credit:policy',
    'ar:credit:run',
    'ar:credit:approve',
    'ar:credit:dispute',
    'ar:credit:writeoff',
    'ar:credit:reserve',
    'ar:credit:customer',
    'ar:collect:workbench',
    'ar:portal:policy',
    'ar:portal:ops',
    'ar:stmt:policy',
    'ar:stmt:run',
    'ar:stmt:email',
    'rb:catalog',
    'rb:contract',
    'rb:usage:ingest',
    'rb:invoice:run',
    'rb:credit',
    'rev:policy',
    'rev:allocate',
    'rev:schedule',
    'rev:recognize',
    'rev:export',
    'rev:ssp:catalog',
    'rev:ssp:bundle',
    'rev:ssp:discount',
    'close:board:view',
    'close:run',
    'close:report',
    'controls:auto',
    'controls:cert',
    'insights:benchmark',
    'insights:close',
    'evidence:vault',
    'evidence:ebinder',
    'sox:302',
    'sox:404',
    'sox:test.plan',
    'sox:test.exec',
    'attest:portal',
    'audit:workspace',
    'itgc:uar',
    'ops:run:read',
    'lease:read',
    'lease:manage',
    'lease:post',
    'lease:disclose',
    'lease:sublease',
    'lease:slb',
    'lease:lessor_post',
    'lease:exit:prepare',
    'lease:exit:post',
    'lease:restoration',
    'lease:impair:test',
    'lease:impair:post',
    'lease:onerous',
  ],
  ops: [
    'reports:read',
    'audit:read',
    'audit:view',
    'itgc:view',
    'itgc:breakglass',
    'itgc:campaigns',
    'close:board:view',
    'close:run',
    'close:report',
    'budgets:read',
    'forecasts:manage',
    'cash:manage',
    'capex:manage',
    'fx:read',
    'alloc:read',
    'tax:read',
    'consol:read',
    'pay:bank_profile',
    'pay:dispatch',
    'ar:dunning:run',
    'ar:cashapp:run',
    'ar:ptp',
    'ar:dispute',
    'ar:credit:run',
    'ar:credit:dispute',
    'ar:credit:writeoff',
    'ar:credit:reserve',
    'ar:credit:customer',
    'ar:collect:workbench',
    'ar:portal:ops',
    'ar:stmt:run',
    'ar:stmt:email',
    'rb:catalog',
    'rb:contract',
    'rb:usage:ingest',
    'rb:invoice:run',
    'rb:credit',
    'rev:policy',
    'rev:allocate',
    'rev:schedule',
    'rev:recognize',
    'rev:export',
    'rev:ssp:catalog',
    'rev:ssp:bundle',
    'rev:ssp:discount',
    'close:board:view',
    'close:run',
    'close:report',
    'controls:auto',
    'controls:cert',
    'insights:benchmark',
    'insights:close',
    'evidence:vault',
    'evidence:ebinder',
    'sox:302',
    'sox:404',
    'sox:test.plan',
    'sox:test.exec',
    'attest:portal',
    'audit:workspace',
    'itgc:uar',
    'ops:playbook:approve',
    'ops:playbook:execute',
    'ops:run:read',
    'lease:read',
    'lease:exit:prepare',
  ],
};

export function normalizeScopes(
  role: 'admin' | 'accountant' | 'ops',
  requested?: string[]
): Capability[] {
  const roleCaps = new Set(ROLE_CAPS[role]);
  if (!requested || !requested.length) return Array.from(roleCaps);
  return requested.filter((s): s is Capability =>
    roleCaps.has(s as Capability)
  );
}

/** Check if user has required capability */
export async function requireCapability(
  auth: any,
  capability: Capability
): Promise<Response | true> {
  // For now, we'll assume all authenticated users have the required capabilities
  // In a real implementation, you would check the user's role and capabilities
  return true;
}
